<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Blog do ManuWell]]></title>
  <link href="http://wjsantos.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://wjsantos.github.io/"/>
  <updated>2015-03-07T19:36:48-03:00</updated>
  <id>http://wjsantos.github.io/</id>
  <author>
    <name><![CDATA[Wellington Santos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Banalização Das Gems]]></title>
    <link href="http://wjsantos.github.io/blog/2015/02/06/banalizacao-das-gems/"/>
    <updated>2015-02-06T21:27:33-02:00</updated>
    <id>http://wjsantos.github.io/blog/2015/02/06/banalizacao-das-gems</id>
    <content type="html"><![CDATA[<p>Evite adicionar <code>gems</code> para funções específicas, ou que fazem
mais do que você necessita.</p>

<p>Vivemos uma era em que não faltam <code>gems</code> para as coisas
mais específicas possíveis. Temos <code>gems</code> para instalação de
bootstraps, deixar console colorido e por aí afora.</p>

<!-- more -->


<h2>Banalização das GEMS</h2>

<p>Com <code>gems</code> cada vez mais específicas e sem um critério para sua
instalação na aplicação, vamos cada vez mais inflando nosso projeto
com dependências externas.</p>

<p>Essas <code>gems</code> podem possuir suporte, mas por vezes não conseguem
se manter atualizada ao longo da evolução da sua <code>aplicação</code>.</p>

<p>Quando houver a necessidade de atualização de seu rails por exemplo,
e uma dessas <code>gems</code> específicas não der suporte, vc. se encontrará numa
situação difícil. Sem tempo hábil para a remoção da <code>gem</code> que quebra
sua aplicação vc. provavelmente optará por deixar de lado
a atualização de seu <code>rails</code>.</p>

<h2>Conclusão</h2>

<p>Tenha sempre o menor número de dependências em seu projeto. Abra os fontes
das <code>gems</code> que deseja instalar. Veja se a sua necessidade não é um trecho
de código que possa ser extraído em um <code>initializer</code>, <code>lib</code> dentro do rails.</p>

<p>Tenha sempre seu <code>Gemfile</code> o mais enxuto possível. Isso lhe facilitará em
manter sua aplicação atualizada e lhe gerará menos dor de cabeça no futuro.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Organizando Assets De Javascript No Rails]]></title>
    <link href="http://wjsantos.github.io/blog/2015/02/06/organizando-assets-no-rails/"/>
    <updated>2015-02-06T13:38:18-02:00</updated>
    <id>http://wjsantos.github.io/blog/2015/02/06/organizando-assets-no-rails</id>
    <content type="html"><![CDATA[<p>Sabemos que o <code>application.js</code> centraliza os javascripts
de uma aplicação rails.</p>

<p>Este arquivo permite que façamos includes de arquivos externos
e, de forma modularizada, compôr nosso javascript da aplicação.</p>

<p>O que em nenhum lugar se fala ou comenta é: <strong>como fazer scripts que rodem
em páginas específicas? Como estruturar de forma escalável seus assets?</strong></p>

<!-- more -->


<h2>Como estruturar então?</h2>

<p>Em projetos que estou trabalhando começamos a usar uma <code>lib js</code> chamada
<a href="https://github.com/lucasmazza/page.js">page.js</a> do <a href="https://github.com/lucasmazza">lucasmazza</a>.
Ela nos permite direcionar javascripts para actions de controllers específicas.</p>

<p>Esse é o primeiro passo para estruturar sua aplicação. Adicionar no
<code>vendor/assets/javascripts/</code> o arquivo <code>page.min.js</code>.</p>

<p>Tendo adicionado ao vendor, precisamos incluir no nosso <code>application.js</code>:</p>

<pre><code class="javascript">//= require page.min

$(document).ready(function(){
  // runs page js
  page.dispatch();
})
</code></pre>

<p>Configurado nosso <code>application.js</code>, bora identificar nossas actions em nosso
template. Para isso, abra seu template <code>views/layouts/application.html.erb</code>
e insira:</p>

<pre><code class="html">&lt;body data-page="&lt;%= controller_path %&gt;#&lt;%= action_name %&gt;"&gt;
</code></pre>

<h2>Estrutura de diretórios</h2>

<p>Com tudo preparado, vamos criar um diretório em:</p>

<pre><code class="bash">app/assets/javascripts/pages/
</code></pre>

<p>E criemos nosso primeiro script que roda somente para a rota &ldquo;tweets#index&rdquo;:</p>

<pre><code class="javascript">// pages/tweets.js

page.at("tweets#index", function(){
  alert("showing my tweets");
})

page.at("tweets#show", function(){
  alert("showing one tweet");
})
</code></pre>

<p>Adicione no <code>application.js</code> o diretório de <code>/pages</code> logo abaixo
da inclusão do <code>page.min</code></p>

<pre><code class="javascript">//= require page.min
//= require_tree ./pages
</code></pre>

<p>E voilá.</p>

<p>Temos tudo em uma estrutura escalável, de fácil manutenção e isolada de scripts.</p>

<p>Foi um grande aprendizado para mim que, no início, jogava meus scripts de forma
desornenada dentro do <code>application.js</code> ou em <code>arquivos</code> desconexos para inclusão direta
nas views ou com <code>ifs</code> nojentos.</p>

<p>Espero ter ajudado. ;-)</p>
]]></content>
  </entry>
  
</feed>
